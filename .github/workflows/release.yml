name: Release and update update.json on version bump

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from update_test.php
        id: get_version
        run: |
          VERSION=$(grep -E '^Version:' update_test.php | awk '{print $2}')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get latest tag
        id: get_tag
        run: |
          TAG=$(git tag --sort=-v:refname | head -n1)
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Compare version and tag
        id: compare
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          TAG=${{ steps.get_tag.outputs.tag }}
          if [ -z "$TAG" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          elif [ "$(printf '%s\n' "$VERSION" "$TAG" | sort -V | tail -n1)" = "$VERSION" ] && [ "$VERSION" != "$TAG" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Create tag if version increased
        if: steps.compare.outputs.should_release == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.get_version.outputs.version }}
          git push origin ${{ steps.get_version.outputs.version }}

      - name: Create zip for release
        if: steps.compare.outputs.should_release == 'true'
        run: |
          git archive --format zip --output update_test.zip HEAD

      - name: Create GitHub Release
        if: steps.compare.outputs.should_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          files: update_test.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-json:
    needs: release
    runs-on: ubuntu-latest
    if: needs.release.outputs.version != ''
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set version and package url
        id: set_vars
        run: |
          VERSION_NO_V=${{ needs.release.outputs.version }}
          ZIP_URL="https://github.com/${{ github.repository }}/releases/download/${{ needs.release.outputs.version }}/update_test.zip"
          echo "version=$VERSION_NO_V" >> $GITHUB_OUTPUT
          echo "package=$ZIP_URL" >> $GITHUB_OUTPUT

      - name: Generate update.json
        run: |
          echo "{\"version\": \"${{ steps.set_vars.outputs.version }}\", \"package\": \"${{ steps.set_vars.outputs.package }}\", \"url\": \"https://github.com/${{ github.repository }}\"}" > update.json

      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages

      - name: Copy update.json to gh-pages
        run: |
          cp update.json gh-pages/update.json

      - name: Commit and push update.json
        run: |
          cd gh-pages
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add update.json
          git commit -m "Update update.json [skip ci]" || echo "No changes to commit"
          git pull --rebase
          git push
